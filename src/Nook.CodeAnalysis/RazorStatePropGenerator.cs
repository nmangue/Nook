using Microsoft.CodeAnalysis;
using Nook.CodeAnalysis.Language;
using System;
using System.IO;

namespace Nook.CodeAnalysis;

[Generator]
public class RazorStatePropGenerator : IIncrementalGenerator
{
    private record RazorInfos(string ClassName);

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var razorFiles = context.AdditionalTextsProvider
            .Where(static file => file.Path.EndsWith(".razor", System.StringComparison.OrdinalIgnoreCase))
            .Combine(context.AnalyzerConfigOptionsProvider)
            .Select(static (tuple, _) =>
            {
                var (file, optionsProvider) = tuple;

                var className = Path.GetFileNameWithoutExtension(file.Path);
                className = CSharpIdentifier.SanitizeIdentifier(className);

                return new RazorInfos(className);
            });

        context.RegisterSourceOutput(razorFiles, static (spc, razorFiles) =>
        {
            spc.AddSource($"{razorFiles.ClassName}.g.cs", $$"""
                // <auto-generated/>
                #nullable enable

                namespace NookGen;

                public partial class {{razorFiles.ClassName}}
                {
                    public const int Value = 42;
                }
                """);
        });
    }
}
