using Microsoft.CodeAnalysis;
using Nook.CodeAnalysis.Language;
using System;
using System.IO;
using System.Linq;
using System.Text;

namespace Nook.CodeAnalysis;

[Generator]
public class RazorStatePropGenerator : IIncrementalGenerator
{
    private record RazorInfos(string ClassName, string Namespace, string Debug);

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var razorFiles = context.AdditionalTextsProvider
            .Where(static file => file.Path.EndsWith(".razor", StringComparison.OrdinalIgnoreCase))
            .Combine(context.AnalyzerConfigOptionsProvider)
            .Select(static (tuple, _) =>
            {
                var (file, optionsProvider) = tuple;

                var className = GetClassNameFromPath(file.Path);

                var options = optionsProvider.GetOptions(file);
                if (!options.TryGetValue("build_property.rootnamespace", out var rootNamespace) || 
                    !options.TryGetValue("build_property.projectdir", out var projectDir))
                {
                    return null;
                }

                var debug = file.Path + "\n" + projectDir;

                var ns = ComputeNamespaceFromPath(file.Path, projectDir, rootNamespace);

                debug += "\n" + ns;

                return new RazorInfos(className, ns, debug);
            })
            .WhereNotNull();

        context.RegisterSourceOutput(razorFiles, static (spc, razorFiles) =>
        {
            spc.AddSource($"{razorFiles.ClassName}.g.cs", $$"""
                // <auto-generated/>
                #nullable enable

                namespace {{razorFiles.Namespace}};

                public partial class {{razorFiles.ClassName}}
                {
                    /*
                    {{razorFiles.Debug}}
                    */
                    public const int Value = 42;
                }
                """);
        });
    }

    private static string GetClassNameFromPath(string path)
    {
        var className = Path.GetFileNameWithoutExtension(path);
        className = CSharpIdentifier.SanitizeIdentifier(className);
        return className;
    }

    internal static string ComputeNamespaceFromPath(string filePath, string projectDir, string? rootNamespace)
    {
        var fileDir = Path.GetDirectoryName(filePath);
        var relativeDir = PathUtils.GetRelativePath(projectDir, fileDir);

        var nsBuilder = new StringBuilder(rootNamespace ?? "Razor");

        // Check if the relativeDir is not simply the current dir "."
        // Or a parent direction ".." (the latter should not happen)
        if (!string.IsNullOrEmpty(relativeDir) && relativeDir[0] != '.')
        {
            const char namespaceSeparatorChar = '.';

            var nsIdentifiers = relativeDir
                .TrimEnd(Path.DirectorySeparatorChar)
                .Split(Path.DirectorySeparatorChar)
                .Select(CSharpIdentifier.SanitizeIdentifier);

            foreach (var identifier in nsIdentifiers)
            {
                nsBuilder.Append(namespaceSeparatorChar);
                nsBuilder.Append(identifier);
            }
        }

        return nsBuilder.ToString();
    }

}
