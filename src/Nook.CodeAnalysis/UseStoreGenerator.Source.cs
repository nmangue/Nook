using Microsoft.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;

namespace Nook.CodeAnalysis;

public partial class UseStoreGenerator
{
    private static void GenerateCode(SourceProductionContext context, IGrouping<ISymbol, IInfos> infos)
    {
        var items = infos.ToImmutableList();

        var declaration = items.OfType<StoreDeclaration>().SingleOrDefault();
        var actions = items.OfType<ActionDeclaration>();

        if (declaration != null)
        {
            StringBuilder builder = new();
            using StringWriter writer = new(builder, CultureInfo.InvariantCulture);
            using IndentedTextWriter document = new(writer, "    ");

            document.WriteLine("// <auto-generated/>");
            document.WriteLine("#nullable enable");
            document.WriteBlankLine();


            if (!declaration.StoreType.ContainingNamespace.IsGlobalNamespace)
            {
                document.WriteLine($"namespace {declaration.StoreType.ContainingNamespace.ToDisplayString()};");
                document.WriteBlankLine();
            }

            var x = declaration.StoreType.Name;

            var generatedClassName = $"Use{declaration.StoreType.Name}NookExtensions";

            using (document.WriteBlock($"static partial class {generatedClassName}"))
            {
                var storeTypeFqn = declaration.StoreType.GetFullyQualifiedName();
                var stateTypeFqn = declaration.StateType.GetFullyQualifiedName();
                using (document.WriteBlock($"public static {stateTypeFqn} GetState(this global::Nook.Core.IUse<{storeTypeFqn}> value)"))
                {
                    document.WriteLine($"return ((global::Nook.Core.Use<{storeTypeFqn}>)value).Instance.CurrentState;");
                }

                foreach (var action in actions)
                {
                    document.WriteBlankLine();

                    var boundParameters = action.Parameters.Where(p => p.BindFromService).ToImmutableList();
                    var callParameters = action.Parameters.Except(boundParameters).ToImmutableList();

                    string actionName = action.MethodSymbol.Name;
                    var returnType = action.IsAsync ? "async Task" : "void";
                    using (document.WriteBlock($"public static {returnType} {actionName}(this global::Nook.Core.IUse<{storeTypeFqn}> value{GenerateParameters(callParameters)})"))
                    {
                        document.WriteLine($"var implementation = (global::Nook.Core.Use<{storeTypeFqn}>)value;");

                        void WriteStateUpdate()
                        {
                            var invokation = $"implementation.Instance.{actionName}({GenerateCallParameters(action.Parameters)})";
                            if (action.IsAsync)
                            {
                                invokation = $"await {invokation}.ConfigureAwait(false)";
                            }

                            document.WriteLine($"var newState = {invokation};");
                            document.WriteLine($"implementation.Instance.CurrentState = newState;");
                        }

                        if (boundParameters.Any())
                        {
                            using (document.WriteBlock("using (global::Microsoft.Extensions.DependencyInjection.IServiceScope scope = implementation.CreateServiceScope())"))
                            {
                                foreach (var boundParameter in boundParameters)
                                {
                                    document.WriteLine($"var {boundParameter.ParameterSymbol.Name} = scope.ServiceProvider.GetRequiredService<{boundParameter.ParameterSymbol.Type.GetFullyQualifiedName()}>();");
                                }

                                WriteStateUpdate();
                            }
                        }
                        else
                        {
                            WriteStateUpdate();
                        }
                    }
                }
            }

            context.AddSource($"{generatedClassName}.g.cs", writer.ToString());
        }
    }

    private static string GenerateParameters(IReadOnlyCollection<ActionParameterInfos> parameters)
        => parameters.Any()
            ? ", " + string.Join(", ", parameters.Select(p => $"{p.ParameterSymbol.Type.GetFullyQualifiedName()} {p.ParameterSymbol.Name}"))
            : string.Empty;

    private static string GenerateCallParameters(IReadOnlyCollection<ActionParameterInfos> parameters)
        => parameters.Any()
            ? string.Join(", ", parameters.Select(p => p.ParameterSymbol.Name))
            : string.Empty;
}
