namespace Nook.SourceGenerators.Tests.TestCases;

internal static class AsyncAction
{
    public const string Input = """
        using Nook.Core;

        namespace AsyncActionTest
        {
            public record MyState(int Counter)
            {
                public MyState() : this(0) { }
            }

            public interface IRepository
            {
                // Nothing
            }

            public class MyAsyncStore : Store<MyState>
            {
                [Action]
                public async Task<MyState> RunHeavyCompute([AsService] IRepository repository, int coef, CancellationToken cancellationToken)
                {
                    await Task.Delay(TimeSpan.FromSeconds(42));
                    return new(CurrentState.Counter + coef);
                }
            }
        }
        """;

    public const string ExpectedOutput = """
        // <auto-generated/>
        #nullable enable
        
        namespace AsyncActionTest;
        
        static partial class UseMyAsyncStoreNookExtensions
        {
            public static global::AsyncActionTest.MyState GetState(this global::Nook.Core.IUse<global::AsyncActionTest.MyAsyncStore> value)
            {
                return ((global::Nook.Core.Use<global::AsyncActionTest.MyAsyncStore>)value).Instance.CurrentState;
            }

            public static async Task RunHeavyCompute(this global::Nook.Core.IUse<global::AsyncActionTest.MyAsyncStore> value, int coef, CancellationToken cancellationToken)
            {
                var implementation = (global::Nook.Core.Use<global::AsyncActionTest.MyAsyncStore>)value;
                using (global::Microsoft.Extensions.DependencyInjection.IServiceScope scope = implementation.CreateServiceScope())
                {
                    var repository = scope.ServiceProvider.GetRequiredService<global::AsyncActionTest.IRepository>();
                    var newState = await implementation.Instance.RunHeavyCompute(repository, coef, cancellationToken).ConfigureAwait(false);
                    implementation.Instance.CurrentState = newState;
                }
            }
        }

        """;
}