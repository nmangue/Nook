namespace Nook.SourceGenerators.Tests.TestCases;

internal static class SimpleState
{
    public const string Input = """
        using Microsoft.AspNetCore.Mvc;

        using Nook.Core;

        namespace GeneratorTests
        {
            public record MyState(int Counter)
            {
                public MyState() : this(0) { }
            }

            public interface IRepository
            {
                // Nothing
            }

            public class MyStore : Store<MyState>
            {
                [Action]
                public MyState Increment()
                {
                    return new(CurrentState.Counter + 1);
                }

                [Action]
                public MyState IncrementBy(int count)
                {
                    return new(CurrentState.Counter + count);
                }

                [Action]
                public MyState FetchTodos(string username, [FromServices] IRepository repository)
                {
                    return CurrentState;
                }
            }
        }
        """;

    public const string ExpectedOutput = """
        // <auto-generated/>
        #nullable enable
        
        namespace GeneratorTests;
        
        static partial class UseMyStore
        {
            public static global::GeneratorTests.MyState GetState(this global::Nook.Core.IUse<global::GeneratorTests.MyStore> value)
            {
                return ((global::Nook.Core.Use<global::GeneratorTests.MyStore>)value).Instance.CurrentState;
            }

            public static void Increment(this global::Nook.Core.IUse<global::GeneratorTests.MyStore> value)
            {
                var implementation = (global::Nook.Core.Use<global::GeneratorTests.MyStore>)value;
                var newState = implementation.Instance.Increment();
                implementation.Instance.CurrentState = newState;
            }

            public static void IncrementBy(this global::Nook.Core.IUse<global::GeneratorTests.MyStore> value, int count)
            {
                var implementation = (global::Nook.Core.Use<global::GeneratorTests.MyStore>)value;
                var newState = implementation.Instance.IncrementBy(count);
                implementation.Instance.CurrentState = newState;
            }

            public static void FetchTodos(this global::Nook.Core.IUse<global::GeneratorTests.MyStore> value, string username)
            {
                var implementation = (global::Nook.Core.Use<global::GeneratorTests.MyStore>)value;
                using (global::Microsoft.Extensions.DependencyInjection.IServiceScope scope = implementation.CreateServiceScope())
                {
                    var repository = scope.ServiceProvider.GetRequiredService<global::GeneratorTests.IRepository>();
                    var newState = implementation.Instance.FetchTodos(username, repository);
                    implementation.Instance.CurrentState = newState;
                }
            }
        }

        """;
}